#Github: https://github.com/ValeriaArellano/UTN-TUPaD-P1
# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
# funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
# entre 1 y el n√∫mero que indique el usuario

def factorial(x):
    return 1 if x == 0 else x * factorial(x -1)

num = int(input("Ingrese un numero: "))

for i in range (num + 1):
    print(f"El factorial de {i} es {factorial(i)}")

# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
# indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
# especifique.

def fibonacci(posicion):
    if posicion == 0:
        return 0
    elif posicion == 1:
        return 1
    else:
        return fibonacci(posicion - 1) + fibonacci(posicion - 2)

pos = int(input("Ingrese la posicion: "))

print("Valor de Fibonacci hasta la posici√≥n", pos, ":")

for i in range(pos + 1):
    print(fibonacci(i))


# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
# exponente, utilizando la f√≥rmula ùëõ
# ùëö = ùëõ ‚àó ùëõ
# (ùëö‚àí1)
# . Prueba esta funci√≥n en un
# algoritmo general.

def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)


base = int(input("Ingresa la base: "))
exponente = int(input("Ingresa el exponente: "))

resultado = potencia(base, exponente)
print(f"{base} elevado a la {exponente} es {resultado}")

# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
# decimal y devuelva su representaci√≥n en binario como una cadena de texto.
# Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y
# unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este
# procedimiento:
# 1. Dividir el n√∫mero por 2.
# 2. Guardar el resto (0 o 1).
# 3. Repetir el proceso con el cociente hasta que llegue a 0.
# 4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.
# Convertir el n√∫mero 10 a binario:
# 10 √∑ 2 = 5 resto: 0
# 5 √∑ 2 = 2 resto: 1
# 2 √∑ 2 = 1 resto: 0
# 1 √∑ 2 = 0 resto: 1
# Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010"

def decimal_a_binario(num):
    if num == 0:
        return ""
    else:
        return decimal_a_binario(num // 2) + str(num % 2)

numero = int(input("Ingrese un n√∫mero entero positivo: "))

if numero == 0:
    print("El n√∫mero binario es: 0")
else:
    binario = decimal_a_binario(numero)
    print(f"El n√∫mero {numero} en binario es: {binario}")


# 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
# cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
# lo es.
#  Requisitos:
# La soluci√≥n debe ser recursiva.
# No se debe usar [::-1] ni la funci√≥n reversed()

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])

palabra = input("Ingrese una palabra: ")
print(es_palindromo(palabra))

# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
# n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
#  Restricciones:
# No se puede convertir el n√∫mero a string.
# Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
# Ejemplos:
# suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
# suma_digitos(9) ‚Üí 9
# suma_digitos(305) ‚Üí 8 (3 + 0 + 5)

def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)
    
numero = int(input("Ingrese un numero entero positivo: "))
print(f"La suma de los digitos del numero {numero} es: {suma_digitos(numero)}")

# 7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
# bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
# √∫ltimo nivel con un solo bloque.
# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
# nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
# pir√°mide.
#  Ejemplos:
# contar_bloques(1) ‚Üí 1 (1)
# contar_bloques(2) ‚Üí 3 (2 + 1)
# contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)

def contar_bloques(n):
    if n <= 1:
        return 1
    else:
        return n + contar_bloques(n - 1)
    
numero = int(input("Ingresa el numero de bloques en el nivel m√°s bajo: "))
print(f"El total de bloques que se necesita para la pir√°mide es: {contar_bloques(numero)}")



# 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
# n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
# aparece ese d√≠gito dentro del n√∫mero.
#  Ejemplos:
# contar_digito(12233421, 2) ‚Üí 3
# contar_digito(5555, 5) ‚Üí 4 
# contar_digito(123456, 7) ‚Üí 0

def contar_digito(numero, digito):
    if numero < 0 or numero != int(numero):
        return "Debe ser un entero positivo."
    if digito > 9 or digito < 0:
        return "El digito debe estar entre 0 y 9"
    if numero == 0:
        return 0
    elif numero % 10 == digito:
        return 1 + contar_digito(numero // 10, digito)
    else:
        return contar_digito(numero // 10, digito)
    
numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese un d√≠gito entre 0 y 9: "))

resultado = contar_digito(numero, digito)
print(f"El d√≠gito {digito} aparece {resultado} veces en el n√∫mero {numero}")

